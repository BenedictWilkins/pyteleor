Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> rule NEWLINE program
Rule 2     program -> NEWLINE NEWLINE
Rule 3     program -> rule
Rule 4     program -> rule NEWLINE
Rule 5     rule -> conditions IMPLY actions
Rule 6     conditions -> empty
Rule 7     conditions -> condition
Rule 8     conditions -> condition COMMA conditions
Rule 9     actions -> empty
Rule 10    actions -> action
Rule 11    actions -> action COMMA actions
Rule 12    action -> statement
Rule 13    condition -> statement
Rule 14    statement -> NAME LPAREN args RPAREN
Rule 15    condition -> arg operator arg
Rule 16    operator -> LT
Rule 17    operator -> GT
Rule 18    operator -> LTE
Rule 19    operator -> GTE
Rule 20    operator -> E
Rule 21    empty -> <empty>
Rule 22    args -> empty
Rule 23    args -> arg
Rule 24    args -> arg COMMA args
Rule 25    arg -> STR
Rule 26    arg -> FLOAT
Rule 27    arg -> INT
Rule 28    arg -> NAME

Terminals, with rules where they appear

COMMA                : 8 11 24
COMMENT              : 
E                    : 20
FLOAT                : 26
GT                   : 17
GTE                  : 19
IMPLY                : 5
INT                  : 27
LPAREN               : 14
LT                   : 16
LTE                  : 18
NAME                 : 14 28
NEWLINE              : 1 2 2 4
RPAREN               : 14
STR                  : 25
error                : 

Nonterminals, with rules where they appear

action               : 10 11
actions              : 5 11
arg                  : 15 15 23 24
args                 : 14 24
condition            : 7 8
conditions           : 5 8
empty                : 6 9 22
operator             : 15
program              : 1 0
rule                 : 1 3 4
statement            : 12 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . rule NEWLINE program
    (2) program -> . NEWLINE NEWLINE
    (3) program -> . rule
    (4) program -> . rule NEWLINE
    (5) rule -> . conditions IMPLY actions
    (6) conditions -> . empty
    (7) conditions -> . condition
    (8) conditions -> . condition COMMA conditions
    (21) empty -> .
    (13) condition -> . statement
    (15) condition -> . arg operator arg
    (14) statement -> . NAME LPAREN args RPAREN
    (25) arg -> . STR
    (26) arg -> . FLOAT
    (27) arg -> . INT
    (28) arg -> . NAME

    NEWLINE         shift and go to state 3
    IMPLY           reduce using rule 21 (empty -> .)
    NAME            shift and go to state 9
    STR             shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    program                        shift and go to state 1
    rule                           shift and go to state 2
    conditions                     shift and go to state 4
    empty                          shift and go to state 5
    condition                      shift and go to state 6
    statement                      shift and go to state 7
    arg                            shift and go to state 8

state 1

    (0) S' -> program .



state 2

    (1) program -> rule . NEWLINE program
    (3) program -> rule .
    (4) program -> rule . NEWLINE

    NEWLINE         shift and go to state 13
    $end            reduce using rule 3 (program -> rule .)


state 3

    (2) program -> NEWLINE . NEWLINE

    NEWLINE         shift and go to state 14


state 4

    (5) rule -> conditions . IMPLY actions

    IMPLY           shift and go to state 15


state 5

    (6) conditions -> empty .

    IMPLY           reduce using rule 6 (conditions -> empty .)


state 6

    (7) conditions -> condition .
    (8) conditions -> condition . COMMA conditions

    IMPLY           reduce using rule 7 (conditions -> condition .)
    COMMA           shift and go to state 16


state 7

    (13) condition -> statement .

    COMMA           reduce using rule 13 (condition -> statement .)
    IMPLY           reduce using rule 13 (condition -> statement .)


state 8

    (15) condition -> arg . operator arg
    (16) operator -> . LT
    (17) operator -> . GT
    (18) operator -> . LTE
    (19) operator -> . GTE
    (20) operator -> . E

    LT              shift and go to state 18
    GT              shift and go to state 19
    LTE             shift and go to state 20
    GTE             shift and go to state 21
    E               shift and go to state 22

    operator                       shift and go to state 17

state 9

    (14) statement -> NAME . LPAREN args RPAREN
    (28) arg -> NAME .

    LPAREN          shift and go to state 23
    LT              reduce using rule 28 (arg -> NAME .)
    GT              reduce using rule 28 (arg -> NAME .)
    LTE             reduce using rule 28 (arg -> NAME .)
    GTE             reduce using rule 28 (arg -> NAME .)
    E               reduce using rule 28 (arg -> NAME .)


state 10

    (25) arg -> STR .

    LT              reduce using rule 25 (arg -> STR .)
    GT              reduce using rule 25 (arg -> STR .)
    LTE             reduce using rule 25 (arg -> STR .)
    GTE             reduce using rule 25 (arg -> STR .)
    E               reduce using rule 25 (arg -> STR .)
    COMMA           reduce using rule 25 (arg -> STR .)
    IMPLY           reduce using rule 25 (arg -> STR .)
    RPAREN          reduce using rule 25 (arg -> STR .)


state 11

    (26) arg -> FLOAT .

    LT              reduce using rule 26 (arg -> FLOAT .)
    GT              reduce using rule 26 (arg -> FLOAT .)
    LTE             reduce using rule 26 (arg -> FLOAT .)
    GTE             reduce using rule 26 (arg -> FLOAT .)
    E               reduce using rule 26 (arg -> FLOAT .)
    COMMA           reduce using rule 26 (arg -> FLOAT .)
    IMPLY           reduce using rule 26 (arg -> FLOAT .)
    RPAREN          reduce using rule 26 (arg -> FLOAT .)


state 12

    (27) arg -> INT .

    LT              reduce using rule 27 (arg -> INT .)
    GT              reduce using rule 27 (arg -> INT .)
    LTE             reduce using rule 27 (arg -> INT .)
    GTE             reduce using rule 27 (arg -> INT .)
    E               reduce using rule 27 (arg -> INT .)
    COMMA           reduce using rule 27 (arg -> INT .)
    IMPLY           reduce using rule 27 (arg -> INT .)
    RPAREN          reduce using rule 27 (arg -> INT .)


state 13

    (1) program -> rule NEWLINE . program
    (4) program -> rule NEWLINE .
    (1) program -> . rule NEWLINE program
    (2) program -> . NEWLINE NEWLINE
    (3) program -> . rule
    (4) program -> . rule NEWLINE
    (5) rule -> . conditions IMPLY actions
    (6) conditions -> . empty
    (7) conditions -> . condition
    (8) conditions -> . condition COMMA conditions
    (21) empty -> .
    (13) condition -> . statement
    (15) condition -> . arg operator arg
    (14) statement -> . NAME LPAREN args RPAREN
    (25) arg -> . STR
    (26) arg -> . FLOAT
    (27) arg -> . INT
    (28) arg -> . NAME

    $end            reduce using rule 4 (program -> rule NEWLINE .)
    NEWLINE         shift and go to state 3
    IMPLY           reduce using rule 21 (empty -> .)
    NAME            shift and go to state 9
    STR             shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    rule                           shift and go to state 2
    program                        shift and go to state 24
    conditions                     shift and go to state 4
    empty                          shift and go to state 5
    condition                      shift and go to state 6
    statement                      shift and go to state 7
    arg                            shift and go to state 8

state 14

    (2) program -> NEWLINE NEWLINE .

    $end            reduce using rule 2 (program -> NEWLINE NEWLINE .)


state 15

    (5) rule -> conditions IMPLY . actions
    (9) actions -> . empty
    (10) actions -> . action
    (11) actions -> . action COMMA actions
    (21) empty -> .
    (12) action -> . statement
    (14) statement -> . NAME LPAREN args RPAREN

    NEWLINE         reduce using rule 21 (empty -> .)
    $end            reduce using rule 21 (empty -> .)
    NAME            shift and go to state 29

    actions                        shift and go to state 25
    empty                          shift and go to state 26
    action                         shift and go to state 27
    statement                      shift and go to state 28

state 16

    (8) conditions -> condition COMMA . conditions
    (6) conditions -> . empty
    (7) conditions -> . condition
    (8) conditions -> . condition COMMA conditions
    (21) empty -> .
    (13) condition -> . statement
    (15) condition -> . arg operator arg
    (14) statement -> . NAME LPAREN args RPAREN
    (25) arg -> . STR
    (26) arg -> . FLOAT
    (27) arg -> . INT
    (28) arg -> . NAME

    IMPLY           reduce using rule 21 (empty -> .)
    NAME            shift and go to state 9
    STR             shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    condition                      shift and go to state 6
    conditions                     shift and go to state 30
    empty                          shift and go to state 5
    statement                      shift and go to state 7
    arg                            shift and go to state 8

state 17

    (15) condition -> arg operator . arg
    (25) arg -> . STR
    (26) arg -> . FLOAT
    (27) arg -> . INT
    (28) arg -> . NAME

    STR             shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    NAME            shift and go to state 32

    arg                            shift and go to state 31

state 18

    (16) operator -> LT .

    STR             reduce using rule 16 (operator -> LT .)
    FLOAT           reduce using rule 16 (operator -> LT .)
    INT             reduce using rule 16 (operator -> LT .)
    NAME            reduce using rule 16 (operator -> LT .)


state 19

    (17) operator -> GT .

    STR             reduce using rule 17 (operator -> GT .)
    FLOAT           reduce using rule 17 (operator -> GT .)
    INT             reduce using rule 17 (operator -> GT .)
    NAME            reduce using rule 17 (operator -> GT .)


state 20

    (18) operator -> LTE .

    STR             reduce using rule 18 (operator -> LTE .)
    FLOAT           reduce using rule 18 (operator -> LTE .)
    INT             reduce using rule 18 (operator -> LTE .)
    NAME            reduce using rule 18 (operator -> LTE .)


state 21

    (19) operator -> GTE .

    STR             reduce using rule 19 (operator -> GTE .)
    FLOAT           reduce using rule 19 (operator -> GTE .)
    INT             reduce using rule 19 (operator -> GTE .)
    NAME            reduce using rule 19 (operator -> GTE .)


state 22

    (20) operator -> E .

    STR             reduce using rule 20 (operator -> E .)
    FLOAT           reduce using rule 20 (operator -> E .)
    INT             reduce using rule 20 (operator -> E .)
    NAME            reduce using rule 20 (operator -> E .)


state 23

    (14) statement -> NAME LPAREN . args RPAREN
    (22) args -> . empty
    (23) args -> . arg
    (24) args -> . arg COMMA args
    (21) empty -> .
    (25) arg -> . STR
    (26) arg -> . FLOAT
    (27) arg -> . INT
    (28) arg -> . NAME

    RPAREN          reduce using rule 21 (empty -> .)
    STR             shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    NAME            shift and go to state 32

    args                           shift and go to state 33
    empty                          shift and go to state 34
    arg                            shift and go to state 35

state 24

    (1) program -> rule NEWLINE program .

    $end            reduce using rule 1 (program -> rule NEWLINE program .)


state 25

    (5) rule -> conditions IMPLY actions .

    NEWLINE         reduce using rule 5 (rule -> conditions IMPLY actions .)
    $end            reduce using rule 5 (rule -> conditions IMPLY actions .)


state 26

    (9) actions -> empty .

    NEWLINE         reduce using rule 9 (actions -> empty .)
    $end            reduce using rule 9 (actions -> empty .)


state 27

    (10) actions -> action .
    (11) actions -> action . COMMA actions

    NEWLINE         reduce using rule 10 (actions -> action .)
    $end            reduce using rule 10 (actions -> action .)
    COMMA           shift and go to state 36


state 28

    (12) action -> statement .

    COMMA           reduce using rule 12 (action -> statement .)
    NEWLINE         reduce using rule 12 (action -> statement .)
    $end            reduce using rule 12 (action -> statement .)


state 29

    (14) statement -> NAME . LPAREN args RPAREN

    LPAREN          shift and go to state 23


state 30

    (8) conditions -> condition COMMA conditions .

    IMPLY           reduce using rule 8 (conditions -> condition COMMA conditions .)


state 31

    (15) condition -> arg operator arg .

    COMMA           reduce using rule 15 (condition -> arg operator arg .)
    IMPLY           reduce using rule 15 (condition -> arg operator arg .)


state 32

    (28) arg -> NAME .

    COMMA           reduce using rule 28 (arg -> NAME .)
    IMPLY           reduce using rule 28 (arg -> NAME .)
    RPAREN          reduce using rule 28 (arg -> NAME .)


state 33

    (14) statement -> NAME LPAREN args . RPAREN

    RPAREN          shift and go to state 37


state 34

    (22) args -> empty .

    RPAREN          reduce using rule 22 (args -> empty .)


state 35

    (23) args -> arg .
    (24) args -> arg . COMMA args

    RPAREN          reduce using rule 23 (args -> arg .)
    COMMA           shift and go to state 38


state 36

    (11) actions -> action COMMA . actions
    (9) actions -> . empty
    (10) actions -> . action
    (11) actions -> . action COMMA actions
    (21) empty -> .
    (12) action -> . statement
    (14) statement -> . NAME LPAREN args RPAREN

    NEWLINE         reduce using rule 21 (empty -> .)
    $end            reduce using rule 21 (empty -> .)
    NAME            shift and go to state 29

    action                         shift and go to state 27
    actions                        shift and go to state 39
    empty                          shift and go to state 26
    statement                      shift and go to state 28

state 37

    (14) statement -> NAME LPAREN args RPAREN .

    COMMA           reduce using rule 14 (statement -> NAME LPAREN args RPAREN .)
    IMPLY           reduce using rule 14 (statement -> NAME LPAREN args RPAREN .)
    NEWLINE         reduce using rule 14 (statement -> NAME LPAREN args RPAREN .)
    $end            reduce using rule 14 (statement -> NAME LPAREN args RPAREN .)


state 38

    (24) args -> arg COMMA . args
    (22) args -> . empty
    (23) args -> . arg
    (24) args -> . arg COMMA args
    (21) empty -> .
    (25) arg -> . STR
    (26) arg -> . FLOAT
    (27) arg -> . INT
    (28) arg -> . NAME

    RPAREN          reduce using rule 21 (empty -> .)
    STR             shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    NAME            shift and go to state 32

    arg                            shift and go to state 35
    args                           shift and go to state 40
    empty                          shift and go to state 34

state 39

    (11) actions -> action COMMA actions .

    NEWLINE         reduce using rule 11 (actions -> action COMMA actions .)
    $end            reduce using rule 11 (actions -> action COMMA actions .)


state 40

    (24) args -> arg COMMA args .

    RPAREN          reduce using rule 24 (args -> arg COMMA args .)

