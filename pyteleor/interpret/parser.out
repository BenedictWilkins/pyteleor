Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program NEWLINE line
Rule 2     program -> line
Rule 3     line -> satoms COLON
Rule 4     line -> atoms IMPLY
Rule 5     satoms -> ndot COMMA satoms
Rule 6     satoms -> ndot
Rule 7     atoms -> ndot COMMA atoms
Rule 8     atoms -> NAME COMMA atoms
Rule 9     atoms -> NAME
Rule 10    atoms -> ndot
Rule 11    ndot -> NAME DOT

Terminals, with rules where they appear

COLON                : 3
COMMA                : 5 7 8
DOT                  : 11
IMPLY                : 4
NAME                 : 8 9 11
NEWLINE              : 1
error                : 

Nonterminals, with rules where they appear

atoms                : 4 7 8
line                 : 1 2
ndot                 : 5 6 7 10
program              : 1 0
satoms               : 3 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program NEWLINE line
    (2) program -> . line
    (3) line -> . satoms COLON
    (4) line -> . atoms IMPLY
    (5) satoms -> . ndot COMMA satoms
    (6) satoms -> . ndot
    (7) atoms -> . ndot COMMA atoms
    (8) atoms -> . NAME COMMA atoms
    (9) atoms -> . NAME
    (10) atoms -> . ndot
    (11) ndot -> . NAME DOT

    NAME            shift and go to state 6

    program                        shift and go to state 1
    line                           shift and go to state 2
    satoms                         shift and go to state 3
    atoms                          shift and go to state 4
    ndot                           shift and go to state 5

state 1

    (0) S' -> program .
    (1) program -> program . NEWLINE line

    NEWLINE         shift and go to state 7


state 2

    (2) program -> line .

    NEWLINE         reduce using rule 2 (program -> line .)
    $end            reduce using rule 2 (program -> line .)


state 3

    (3) line -> satoms . COLON

    COLON           shift and go to state 8


state 4

    (4) line -> atoms . IMPLY

    IMPLY           shift and go to state 9


state 5

    (5) satoms -> ndot . COMMA satoms
    (6) satoms -> ndot .
    (7) atoms -> ndot . COMMA atoms
    (10) atoms -> ndot .

    COMMA           shift and go to state 10
    COLON           reduce using rule 6 (satoms -> ndot .)
    IMPLY           reduce using rule 10 (atoms -> ndot .)


state 6

    (8) atoms -> NAME . COMMA atoms
    (9) atoms -> NAME .
    (11) ndot -> NAME . DOT

    COMMA           shift and go to state 11
    IMPLY           reduce using rule 9 (atoms -> NAME .)
    DOT             shift and go to state 12


state 7

    (1) program -> program NEWLINE . line
    (3) line -> . satoms COLON
    (4) line -> . atoms IMPLY
    (5) satoms -> . ndot COMMA satoms
    (6) satoms -> . ndot
    (7) atoms -> . ndot COMMA atoms
    (8) atoms -> . NAME COMMA atoms
    (9) atoms -> . NAME
    (10) atoms -> . ndot
    (11) ndot -> . NAME DOT

    NAME            shift and go to state 6

    line                           shift and go to state 13
    satoms                         shift and go to state 3
    atoms                          shift and go to state 4
    ndot                           shift and go to state 5

state 8

    (3) line -> satoms COLON .

    NEWLINE         reduce using rule 3 (line -> satoms COLON .)
    $end            reduce using rule 3 (line -> satoms COLON .)


state 9

    (4) line -> atoms IMPLY .

    NEWLINE         reduce using rule 4 (line -> atoms IMPLY .)
    $end            reduce using rule 4 (line -> atoms IMPLY .)


state 10

    (5) satoms -> ndot COMMA . satoms
    (7) atoms -> ndot COMMA . atoms
    (5) satoms -> . ndot COMMA satoms
    (6) satoms -> . ndot
    (7) atoms -> . ndot COMMA atoms
    (8) atoms -> . NAME COMMA atoms
    (9) atoms -> . NAME
    (10) atoms -> . ndot
    (11) ndot -> . NAME DOT

    NAME            shift and go to state 6

    ndot                           shift and go to state 5
    satoms                         shift and go to state 14
    atoms                          shift and go to state 15

state 11

    (8) atoms -> NAME COMMA . atoms
    (7) atoms -> . ndot COMMA atoms
    (8) atoms -> . NAME COMMA atoms
    (9) atoms -> . NAME
    (10) atoms -> . ndot
    (11) ndot -> . NAME DOT

    NAME            shift and go to state 6

    atoms                          shift and go to state 16
    ndot                           shift and go to state 17

state 12

    (11) ndot -> NAME DOT .

    COMMA           reduce using rule 11 (ndot -> NAME DOT .)
    COLON           reduce using rule 11 (ndot -> NAME DOT .)
    IMPLY           reduce using rule 11 (ndot -> NAME DOT .)


state 13

    (1) program -> program NEWLINE line .

    NEWLINE         reduce using rule 1 (program -> program NEWLINE line .)
    $end            reduce using rule 1 (program -> program NEWLINE line .)


state 14

    (5) satoms -> ndot COMMA satoms .

    COLON           reduce using rule 5 (satoms -> ndot COMMA satoms .)


state 15

    (7) atoms -> ndot COMMA atoms .

    IMPLY           reduce using rule 7 (atoms -> ndot COMMA atoms .)


state 16

    (8) atoms -> NAME COMMA atoms .

    IMPLY           reduce using rule 8 (atoms -> NAME COMMA atoms .)


state 17

    (7) atoms -> ndot . COMMA atoms
    (10) atoms -> ndot .

    COMMA           shift and go to state 18
    IMPLY           reduce using rule 10 (atoms -> ndot .)


state 18

    (7) atoms -> ndot COMMA . atoms
    (7) atoms -> . ndot COMMA atoms
    (8) atoms -> . NAME COMMA atoms
    (9) atoms -> . NAME
    (10) atoms -> . ndot
    (11) ndot -> . NAME DOT

    NAME            shift and go to state 6

    ndot                           shift and go to state 17
    atoms                          shift and go to state 15
