Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program NEWLINE line
Rule 2     program -> line
Rule 3     line -> plan
Rule 4     line -> plan COMMENT
Rule 5     line -> rule
Rule 6     line -> rule COMMENT
Rule 7     plan -> statement COLON
Rule 8     line -> COMMENT
Rule 9     line -> empty
Rule 10    rule -> conditions IMPLY actions
Rule 11    conditions -> empty
Rule 12    conditions -> condition
Rule 13    conditions -> condition COMMA conditions
Rule 14    actions -> empty
Rule 15    actions -> action
Rule 16    actions -> action COMMA actions
Rule 17    action -> NAME LPAREN args RPAREN
Rule 18    condition -> statement
Rule 19    condition -> NAME
Rule 20    statement -> NAME LPAREN args RPAREN
Rule 21    condition -> arg operator arg
Rule 22    operator -> LT
Rule 23    operator -> GT
Rule 24    operator -> LTE
Rule 25    operator -> GTE
Rule 26    operator -> E
Rule 27    operator -> NE
Rule 28    empty -> <empty>
Rule 29    args -> empty
Rule 30    args -> arg
Rule 31    args -> arg COMMA args
Rule 32    arg -> STR
Rule 33    arg -> FLOAT
Rule 34    arg -> INT
Rule 35    arg -> BOOL
Rule 36    arg -> NONE
Rule 37    arg -> statement
Rule 38    arg -> NAME

Terminals, with rules where they appear

BOOL                 : 35
COLON                : 7
COMMA                : 13 16 31
COMMENT              : 4 6 8
E                    : 26
FLOAT                : 33
GT                   : 23
GTE                  : 25
IMPLY                : 10
INT                  : 34
LPAREN               : 17 20
LT                   : 22
LTE                  : 24
NAME                 : 17 19 20 38
NE                   : 27
NEWLINE              : 1
NONE                 : 36
RPAREN               : 17 20
STR                  : 32
error                : 

Nonterminals, with rules where they appear

action               : 15 16
actions              : 10 16
arg                  : 21 21 30 31
args                 : 17 20 31
condition            : 12 13
conditions           : 10 13
empty                : 9 11 14 29
line                 : 1 2
operator             : 21
plan                 : 3 4
program              : 1 0
rule                 : 5 6
statement            : 7 18 37

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program NEWLINE line
    (2) program -> . line
    (3) line -> . plan
    (4) line -> . plan COMMENT
    (5) line -> . rule
    (6) line -> . rule COMMENT
    (8) line -> . COMMENT
    (9) line -> . empty
    (7) plan -> . statement COLON
    (10) rule -> . conditions IMPLY actions
    (28) empty -> .
    (20) statement -> . NAME LPAREN args RPAREN
    (11) conditions -> . empty
    (12) conditions -> . condition
    (13) conditions -> . condition COMMA conditions
    (18) condition -> . statement
    (19) condition -> . NAME
    (21) condition -> . arg operator arg
    (32) arg -> . STR
    (33) arg -> . FLOAT
    (34) arg -> . INT
    (35) arg -> . BOOL
    (36) arg -> . NONE
    (37) arg -> . statement
    (38) arg -> . NAME

    COMMENT         shift and go to state 4
    NEWLINE         reduce using rule 28 (empty -> .)
    $end            reduce using rule 28 (empty -> .)
    IMPLY           reduce using rule 28 (empty -> .)
    NAME            shift and go to state 9
    STR             shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    BOOL            shift and go to state 15
    NONE            shift and go to state 16

    program                        shift and go to state 1
    line                           shift and go to state 2
    plan                           shift and go to state 3
    rule                           shift and go to state 5
    empty                          shift and go to state 6
    statement                      shift and go to state 7
    conditions                     shift and go to state 8
    condition                      shift and go to state 10
    arg                            shift and go to state 11

state 1

    (0) S' -> program .
    (1) program -> program . NEWLINE line

    NEWLINE         shift and go to state 17


state 2

    (2) program -> line .

    NEWLINE         reduce using rule 2 (program -> line .)
    $end            reduce using rule 2 (program -> line .)


state 3

    (3) line -> plan .
    (4) line -> plan . COMMENT

    NEWLINE         reduce using rule 3 (line -> plan .)
    $end            reduce using rule 3 (line -> plan .)
    COMMENT         shift and go to state 18


state 4

    (8) line -> COMMENT .

    NEWLINE         reduce using rule 8 (line -> COMMENT .)
    $end            reduce using rule 8 (line -> COMMENT .)


state 5

    (5) line -> rule .
    (6) line -> rule . COMMENT

    NEWLINE         reduce using rule 5 (line -> rule .)
    $end            reduce using rule 5 (line -> rule .)
    COMMENT         shift and go to state 19


state 6

    (9) line -> empty .
    (11) conditions -> empty .

    NEWLINE         reduce using rule 9 (line -> empty .)
    $end            reduce using rule 9 (line -> empty .)
    IMPLY           reduce using rule 11 (conditions -> empty .)


state 7

    (7) plan -> statement . COLON
    (18) condition -> statement .
    (37) arg -> statement .

    COLON           shift and go to state 20
    COMMA           reduce using rule 18 (condition -> statement .)
    IMPLY           reduce using rule 18 (condition -> statement .)
    LT              reduce using rule 37 (arg -> statement .)
    GT              reduce using rule 37 (arg -> statement .)
    LTE             reduce using rule 37 (arg -> statement .)
    GTE             reduce using rule 37 (arg -> statement .)
    E               reduce using rule 37 (arg -> statement .)
    NE              reduce using rule 37 (arg -> statement .)


state 8

    (10) rule -> conditions . IMPLY actions

    IMPLY           shift and go to state 21


state 9

    (20) statement -> NAME . LPAREN args RPAREN
    (19) condition -> NAME .
    (38) arg -> NAME .

    LPAREN          shift and go to state 22
    COMMA           reduce using rule 19 (condition -> NAME .)
    IMPLY           reduce using rule 19 (condition -> NAME .)
    LT              reduce using rule 38 (arg -> NAME .)
    GT              reduce using rule 38 (arg -> NAME .)
    LTE             reduce using rule 38 (arg -> NAME .)
    GTE             reduce using rule 38 (arg -> NAME .)
    E               reduce using rule 38 (arg -> NAME .)
    NE              reduce using rule 38 (arg -> NAME .)


state 10

    (12) conditions -> condition .
    (13) conditions -> condition . COMMA conditions

    IMPLY           reduce using rule 12 (conditions -> condition .)
    COMMA           shift and go to state 23


state 11

    (21) condition -> arg . operator arg
    (22) operator -> . LT
    (23) operator -> . GT
    (24) operator -> . LTE
    (25) operator -> . GTE
    (26) operator -> . E
    (27) operator -> . NE

    LT              shift and go to state 25
    GT              shift and go to state 26
    LTE             shift and go to state 27
    GTE             shift and go to state 28
    E               shift and go to state 29
    NE              shift and go to state 30

    operator                       shift and go to state 24

state 12

    (32) arg -> STR .

    LT              reduce using rule 32 (arg -> STR .)
    GT              reduce using rule 32 (arg -> STR .)
    LTE             reduce using rule 32 (arg -> STR .)
    GTE             reduce using rule 32 (arg -> STR .)
    E               reduce using rule 32 (arg -> STR .)
    NE              reduce using rule 32 (arg -> STR .)
    COMMA           reduce using rule 32 (arg -> STR .)
    RPAREN          reduce using rule 32 (arg -> STR .)
    IMPLY           reduce using rule 32 (arg -> STR .)


state 13

    (33) arg -> FLOAT .

    LT              reduce using rule 33 (arg -> FLOAT .)
    GT              reduce using rule 33 (arg -> FLOAT .)
    LTE             reduce using rule 33 (arg -> FLOAT .)
    GTE             reduce using rule 33 (arg -> FLOAT .)
    E               reduce using rule 33 (arg -> FLOAT .)
    NE              reduce using rule 33 (arg -> FLOAT .)
    COMMA           reduce using rule 33 (arg -> FLOAT .)
    RPAREN          reduce using rule 33 (arg -> FLOAT .)
    IMPLY           reduce using rule 33 (arg -> FLOAT .)


state 14

    (34) arg -> INT .

    LT              reduce using rule 34 (arg -> INT .)
    GT              reduce using rule 34 (arg -> INT .)
    LTE             reduce using rule 34 (arg -> INT .)
    GTE             reduce using rule 34 (arg -> INT .)
    E               reduce using rule 34 (arg -> INT .)
    NE              reduce using rule 34 (arg -> INT .)
    COMMA           reduce using rule 34 (arg -> INT .)
    RPAREN          reduce using rule 34 (arg -> INT .)
    IMPLY           reduce using rule 34 (arg -> INT .)


state 15

    (35) arg -> BOOL .

    LT              reduce using rule 35 (arg -> BOOL .)
    GT              reduce using rule 35 (arg -> BOOL .)
    LTE             reduce using rule 35 (arg -> BOOL .)
    GTE             reduce using rule 35 (arg -> BOOL .)
    E               reduce using rule 35 (arg -> BOOL .)
    NE              reduce using rule 35 (arg -> BOOL .)
    COMMA           reduce using rule 35 (arg -> BOOL .)
    RPAREN          reduce using rule 35 (arg -> BOOL .)
    IMPLY           reduce using rule 35 (arg -> BOOL .)


state 16

    (36) arg -> NONE .

    LT              reduce using rule 36 (arg -> NONE .)
    GT              reduce using rule 36 (arg -> NONE .)
    LTE             reduce using rule 36 (arg -> NONE .)
    GTE             reduce using rule 36 (arg -> NONE .)
    E               reduce using rule 36 (arg -> NONE .)
    NE              reduce using rule 36 (arg -> NONE .)
    COMMA           reduce using rule 36 (arg -> NONE .)
    RPAREN          reduce using rule 36 (arg -> NONE .)
    IMPLY           reduce using rule 36 (arg -> NONE .)


state 17

    (1) program -> program NEWLINE . line
    (3) line -> . plan
    (4) line -> . plan COMMENT
    (5) line -> . rule
    (6) line -> . rule COMMENT
    (8) line -> . COMMENT
    (9) line -> . empty
    (7) plan -> . statement COLON
    (10) rule -> . conditions IMPLY actions
    (28) empty -> .
    (20) statement -> . NAME LPAREN args RPAREN
    (11) conditions -> . empty
    (12) conditions -> . condition
    (13) conditions -> . condition COMMA conditions
    (18) condition -> . statement
    (19) condition -> . NAME
    (21) condition -> . arg operator arg
    (32) arg -> . STR
    (33) arg -> . FLOAT
    (34) arg -> . INT
    (35) arg -> . BOOL
    (36) arg -> . NONE
    (37) arg -> . statement
    (38) arg -> . NAME

    COMMENT         shift and go to state 4
    NEWLINE         reduce using rule 28 (empty -> .)
    $end            reduce using rule 28 (empty -> .)
    IMPLY           reduce using rule 28 (empty -> .)
    NAME            shift and go to state 9
    STR             shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    BOOL            shift and go to state 15
    NONE            shift and go to state 16

    line                           shift and go to state 31
    plan                           shift and go to state 3
    rule                           shift and go to state 5
    empty                          shift and go to state 6
    statement                      shift and go to state 7
    conditions                     shift and go to state 8
    condition                      shift and go to state 10
    arg                            shift and go to state 11

state 18

    (4) line -> plan COMMENT .

    NEWLINE         reduce using rule 4 (line -> plan COMMENT .)
    $end            reduce using rule 4 (line -> plan COMMENT .)


state 19

    (6) line -> rule COMMENT .

    NEWLINE         reduce using rule 6 (line -> rule COMMENT .)
    $end            reduce using rule 6 (line -> rule COMMENT .)


state 20

    (7) plan -> statement COLON .

    COMMENT         reduce using rule 7 (plan -> statement COLON .)
    NEWLINE         reduce using rule 7 (plan -> statement COLON .)
    $end            reduce using rule 7 (plan -> statement COLON .)


state 21

    (10) rule -> conditions IMPLY . actions
    (14) actions -> . empty
    (15) actions -> . action
    (16) actions -> . action COMMA actions
    (28) empty -> .
    (17) action -> . NAME LPAREN args RPAREN

    COMMENT         reduce using rule 28 (empty -> .)
    NEWLINE         reduce using rule 28 (empty -> .)
    $end            reduce using rule 28 (empty -> .)
    NAME            shift and go to state 35

    actions                        shift and go to state 32
    empty                          shift and go to state 33
    action                         shift and go to state 34

state 22

    (20) statement -> NAME LPAREN . args RPAREN
    (29) args -> . empty
    (30) args -> . arg
    (31) args -> . arg COMMA args
    (28) empty -> .
    (32) arg -> . STR
    (33) arg -> . FLOAT
    (34) arg -> . INT
    (35) arg -> . BOOL
    (36) arg -> . NONE
    (37) arg -> . statement
    (38) arg -> . NAME
    (20) statement -> . NAME LPAREN args RPAREN

    RPAREN          reduce using rule 28 (empty -> .)
    STR             shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    BOOL            shift and go to state 15
    NONE            shift and go to state 16
    NAME            shift and go to state 36

    args                           shift and go to state 37
    empty                          shift and go to state 38
    arg                            shift and go to state 39
    statement                      shift and go to state 40

state 23

    (13) conditions -> condition COMMA . conditions
    (11) conditions -> . empty
    (12) conditions -> . condition
    (13) conditions -> . condition COMMA conditions
    (28) empty -> .
    (18) condition -> . statement
    (19) condition -> . NAME
    (21) condition -> . arg operator arg
    (20) statement -> . NAME LPAREN args RPAREN
    (32) arg -> . STR
    (33) arg -> . FLOAT
    (34) arg -> . INT
    (35) arg -> . BOOL
    (36) arg -> . NONE
    (37) arg -> . statement
    (38) arg -> . NAME

    IMPLY           reduce using rule 28 (empty -> .)
    NAME            shift and go to state 44
    STR             shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    BOOL            shift and go to state 15
    NONE            shift and go to state 16

    condition                      shift and go to state 10
    conditions                     shift and go to state 41
    empty                          shift and go to state 42
    statement                      shift and go to state 43
    arg                            shift and go to state 11

state 24

    (21) condition -> arg operator . arg
    (32) arg -> . STR
    (33) arg -> . FLOAT
    (34) arg -> . INT
    (35) arg -> . BOOL
    (36) arg -> . NONE
    (37) arg -> . statement
    (38) arg -> . NAME
    (20) statement -> . NAME LPAREN args RPAREN

    STR             shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    BOOL            shift and go to state 15
    NONE            shift and go to state 16
    NAME            shift and go to state 36

    arg                            shift and go to state 45
    statement                      shift and go to state 40

state 25

    (22) operator -> LT .

    STR             reduce using rule 22 (operator -> LT .)
    FLOAT           reduce using rule 22 (operator -> LT .)
    INT             reduce using rule 22 (operator -> LT .)
    BOOL            reduce using rule 22 (operator -> LT .)
    NONE            reduce using rule 22 (operator -> LT .)
    NAME            reduce using rule 22 (operator -> LT .)


state 26

    (23) operator -> GT .

    STR             reduce using rule 23 (operator -> GT .)
    FLOAT           reduce using rule 23 (operator -> GT .)
    INT             reduce using rule 23 (operator -> GT .)
    BOOL            reduce using rule 23 (operator -> GT .)
    NONE            reduce using rule 23 (operator -> GT .)
    NAME            reduce using rule 23 (operator -> GT .)


state 27

    (24) operator -> LTE .

    STR             reduce using rule 24 (operator -> LTE .)
    FLOAT           reduce using rule 24 (operator -> LTE .)
    INT             reduce using rule 24 (operator -> LTE .)
    BOOL            reduce using rule 24 (operator -> LTE .)
    NONE            reduce using rule 24 (operator -> LTE .)
    NAME            reduce using rule 24 (operator -> LTE .)


state 28

    (25) operator -> GTE .

    STR             reduce using rule 25 (operator -> GTE .)
    FLOAT           reduce using rule 25 (operator -> GTE .)
    INT             reduce using rule 25 (operator -> GTE .)
    BOOL            reduce using rule 25 (operator -> GTE .)
    NONE            reduce using rule 25 (operator -> GTE .)
    NAME            reduce using rule 25 (operator -> GTE .)


state 29

    (26) operator -> E .

    STR             reduce using rule 26 (operator -> E .)
    FLOAT           reduce using rule 26 (operator -> E .)
    INT             reduce using rule 26 (operator -> E .)
    BOOL            reduce using rule 26 (operator -> E .)
    NONE            reduce using rule 26 (operator -> E .)
    NAME            reduce using rule 26 (operator -> E .)


state 30

    (27) operator -> NE .

    STR             reduce using rule 27 (operator -> NE .)
    FLOAT           reduce using rule 27 (operator -> NE .)
    INT             reduce using rule 27 (operator -> NE .)
    BOOL            reduce using rule 27 (operator -> NE .)
    NONE            reduce using rule 27 (operator -> NE .)
    NAME            reduce using rule 27 (operator -> NE .)


state 31

    (1) program -> program NEWLINE line .

    NEWLINE         reduce using rule 1 (program -> program NEWLINE line .)
    $end            reduce using rule 1 (program -> program NEWLINE line .)


state 32

    (10) rule -> conditions IMPLY actions .

    COMMENT         reduce using rule 10 (rule -> conditions IMPLY actions .)
    NEWLINE         reduce using rule 10 (rule -> conditions IMPLY actions .)
    $end            reduce using rule 10 (rule -> conditions IMPLY actions .)


state 33

    (14) actions -> empty .

    COMMENT         reduce using rule 14 (actions -> empty .)
    NEWLINE         reduce using rule 14 (actions -> empty .)
    $end            reduce using rule 14 (actions -> empty .)


state 34

    (15) actions -> action .
    (16) actions -> action . COMMA actions

    COMMENT         reduce using rule 15 (actions -> action .)
    NEWLINE         reduce using rule 15 (actions -> action .)
    $end            reduce using rule 15 (actions -> action .)
    COMMA           shift and go to state 46


state 35

    (17) action -> NAME . LPAREN args RPAREN

    LPAREN          shift and go to state 47


state 36

    (38) arg -> NAME .
    (20) statement -> NAME . LPAREN args RPAREN

    COMMA           reduce using rule 38 (arg -> NAME .)
    RPAREN          reduce using rule 38 (arg -> NAME .)
    IMPLY           reduce using rule 38 (arg -> NAME .)
    LPAREN          shift and go to state 22


state 37

    (20) statement -> NAME LPAREN args . RPAREN

    RPAREN          shift and go to state 48


state 38

    (29) args -> empty .

    RPAREN          reduce using rule 29 (args -> empty .)


state 39

    (30) args -> arg .
    (31) args -> arg . COMMA args

    RPAREN          reduce using rule 30 (args -> arg .)
    COMMA           shift and go to state 49


state 40

    (37) arg -> statement .

    COMMA           reduce using rule 37 (arg -> statement .)
    RPAREN          reduce using rule 37 (arg -> statement .)
    IMPLY           reduce using rule 37 (arg -> statement .)


state 41

    (13) conditions -> condition COMMA conditions .

    IMPLY           reduce using rule 13 (conditions -> condition COMMA conditions .)


state 42

    (11) conditions -> empty .

    IMPLY           reduce using rule 11 (conditions -> empty .)


state 43

    (18) condition -> statement .
    (37) arg -> statement .

    COMMA           reduce using rule 18 (condition -> statement .)
    IMPLY           reduce using rule 18 (condition -> statement .)
    LT              reduce using rule 37 (arg -> statement .)
    GT              reduce using rule 37 (arg -> statement .)
    LTE             reduce using rule 37 (arg -> statement .)
    GTE             reduce using rule 37 (arg -> statement .)
    E               reduce using rule 37 (arg -> statement .)
    NE              reduce using rule 37 (arg -> statement .)


state 44

    (19) condition -> NAME .
    (20) statement -> NAME . LPAREN args RPAREN
    (38) arg -> NAME .

    COMMA           reduce using rule 19 (condition -> NAME .)
    IMPLY           reduce using rule 19 (condition -> NAME .)
    LPAREN          shift and go to state 22
    LT              reduce using rule 38 (arg -> NAME .)
    GT              reduce using rule 38 (arg -> NAME .)
    LTE             reduce using rule 38 (arg -> NAME .)
    GTE             reduce using rule 38 (arg -> NAME .)
    E               reduce using rule 38 (arg -> NAME .)
    NE              reduce using rule 38 (arg -> NAME .)


state 45

    (21) condition -> arg operator arg .

    COMMA           reduce using rule 21 (condition -> arg operator arg .)
    IMPLY           reduce using rule 21 (condition -> arg operator arg .)


state 46

    (16) actions -> action COMMA . actions
    (14) actions -> . empty
    (15) actions -> . action
    (16) actions -> . action COMMA actions
    (28) empty -> .
    (17) action -> . NAME LPAREN args RPAREN

    COMMENT         reduce using rule 28 (empty -> .)
    NEWLINE         reduce using rule 28 (empty -> .)
    $end            reduce using rule 28 (empty -> .)
    NAME            shift and go to state 35

    action                         shift and go to state 34
    actions                        shift and go to state 50
    empty                          shift and go to state 33

state 47

    (17) action -> NAME LPAREN . args RPAREN
    (29) args -> . empty
    (30) args -> . arg
    (31) args -> . arg COMMA args
    (28) empty -> .
    (32) arg -> . STR
    (33) arg -> . FLOAT
    (34) arg -> . INT
    (35) arg -> . BOOL
    (36) arg -> . NONE
    (37) arg -> . statement
    (38) arg -> . NAME
    (20) statement -> . NAME LPAREN args RPAREN

    RPAREN          reduce using rule 28 (empty -> .)
    STR             shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    BOOL            shift and go to state 15
    NONE            shift and go to state 16
    NAME            shift and go to state 36

    args                           shift and go to state 51
    empty                          shift and go to state 38
    arg                            shift and go to state 39
    statement                      shift and go to state 40

state 48

    (20) statement -> NAME LPAREN args RPAREN .

    COLON           reduce using rule 20 (statement -> NAME LPAREN args RPAREN .)
    COMMA           reduce using rule 20 (statement -> NAME LPAREN args RPAREN .)
    IMPLY           reduce using rule 20 (statement -> NAME LPAREN args RPAREN .)
    LT              reduce using rule 20 (statement -> NAME LPAREN args RPAREN .)
    GT              reduce using rule 20 (statement -> NAME LPAREN args RPAREN .)
    LTE             reduce using rule 20 (statement -> NAME LPAREN args RPAREN .)
    GTE             reduce using rule 20 (statement -> NAME LPAREN args RPAREN .)
    E               reduce using rule 20 (statement -> NAME LPAREN args RPAREN .)
    NE              reduce using rule 20 (statement -> NAME LPAREN args RPAREN .)
    RPAREN          reduce using rule 20 (statement -> NAME LPAREN args RPAREN .)


state 49

    (31) args -> arg COMMA . args
    (29) args -> . empty
    (30) args -> . arg
    (31) args -> . arg COMMA args
    (28) empty -> .
    (32) arg -> . STR
    (33) arg -> . FLOAT
    (34) arg -> . INT
    (35) arg -> . BOOL
    (36) arg -> . NONE
    (37) arg -> . statement
    (38) arg -> . NAME
    (20) statement -> . NAME LPAREN args RPAREN

    RPAREN          reduce using rule 28 (empty -> .)
    STR             shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    BOOL            shift and go to state 15
    NONE            shift and go to state 16
    NAME            shift and go to state 36

    arg                            shift and go to state 39
    args                           shift and go to state 52
    empty                          shift and go to state 38
    statement                      shift and go to state 40

state 50

    (16) actions -> action COMMA actions .

    COMMENT         reduce using rule 16 (actions -> action COMMA actions .)
    NEWLINE         reduce using rule 16 (actions -> action COMMA actions .)
    $end            reduce using rule 16 (actions -> action COMMA actions .)


state 51

    (17) action -> NAME LPAREN args . RPAREN

    RPAREN          shift and go to state 53


state 52

    (31) args -> arg COMMA args .

    RPAREN          reduce using rule 31 (args -> arg COMMA args .)


state 53

    (17) action -> NAME LPAREN args RPAREN .

    COMMA           reduce using rule 17 (action -> NAME LPAREN args RPAREN .)
    COMMENT         reduce using rule 17 (action -> NAME LPAREN args RPAREN .)
    NEWLINE         reduce using rule 17 (action -> NAME LPAREN args RPAREN .)
    $end            reduce using rule 17 (action -> NAME LPAREN args RPAREN .)

